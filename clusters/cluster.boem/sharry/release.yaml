apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: sharry
  namespace: sharry
spec:
  chart:
    spec:
      chart: sharry
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home
        namespace: flux-system
  interval: 5m
  valuesFrom:
    - kind: Secret
      name: sharry-auth-config
      targetPath: config
  values:
    ## IMPORTANT NOTE
    ##
    ## This chart inherits from our common library chart. You can check the default values/options here:
    ## https://github.com/k8s-at-home/library-charts/tree/main/charts/stable/common/values.yaml
    ##
    image:
      # -- image repository
      repository: eikek0/sharry
      # -- image tag
      tag: 1.8.0
      # -- image pull policy
      pullPolicy: IfNotPresent

    # -- Configures service settings for the chart.
    # @default -- See values.yaml
    service:
      main:
        ports:
          http:
            port: 9090

    # -- Override the command line arguments for the default container
    args:
      - "/opt/sharry.conf"

    ingress:
      # -- Enable and configure ingress settings for the chart under this key.
      # @default -- See values.yaml
      main:
        enabled: false
        # -- Enable large file support with those annotations for nginx
        # annotations:
        #   nginx.ingress.kubernetes.io/client-body-buffer-size: "2048m"
        #   nginx.ingress.kubernetes.io/proxy-body-size: "2048m"
        #   nginx.ingress.kubernetes.io/proxy-buffering: "off"

    # -- Sharry configuration. Supports Helm templates.
    # See [application docs](https://eikek.github.io/sharry/doc/configure) for more details.
    # @default -- See values.yaml
    config: |
      sharry.restserver {

        # This is the base URL this application is deployed to. This is used
        # to create absolute URLs and to configure the cookie.
        #
        # Note: Currently deploying behind a path is not supported. The URL
        # should not end in a slash.
        base-url = "https://share.stingalleman.nl"


        # Where the server binds to.
        bind {
          address = "0.0.0.0"
          port = {{ .Values.service.main.ports.http.port }}
        }

        # Configures logging
        logging {
          # The format for the log messages. Can be one of:
          # Json, Logfmt, Fancy or Plain
          format = "Fancy"

          # The minimum level to log. From lowest to highest:
          # Trace, Debug, Info, Warn, Error
          minimum-level = "Warn"

          # Override the log level of specific loggers
          levels = {
            "sharry" = "Info"
            "org.flywaydb" = "Info"
            "binny" = "Info"
            "org.http4s" = "Info"
          }
        }

        # The time from receiving a request until the first line of the
        # response is rendered. When uploading big chunks on slow
        # connections, this may have to be increased (or the
        # `webapp.chunk-size' decreased).
        response-timeout = "4 minutes"

        # The alias-member feature allows to add users to an alias page to
        # automatically make all shares that were uploaded through the
        # corresponding alias available to all members. This allows to
        # search for other users via a http call. If this feature is
        # disabled, the rest call to search other users is disabled and the
        # form element is removed from the ui.
        alias-member-enabled = true

        webapp {
          # This is shown in the top right corner of the web application
          app-name = "Sharry"

          # The icon next to the app-name. Needs to be an URL to an image.
          app-icon = ""

          # The icon next to the app-name when dark mode is enabled.
          app-icon-dark = ""

          # The login and register pages display a logo image, by default
          # the Sharry logo. This can be changed here. It needs to be an URL
          # to an image.
          app-logo = ""

          # The login and register pages display a logo image. This is the
          # one used when dark mode is enabled.
          app-logo-dark = ""

          # This is markdown that is inserted as the footer on each page in
          # the ui. If left empty, a link to the project is rendered.
          app-footer = ""

          # Whether to display the footer on each page in the ui. Set it to
          # false to hide it.
          app-footer-visible = true

          # Chunk size used for one request. The server will re-chunk the
          # stream into smaller chunks. But the client can transfer more in
          # one requests, resulting in faster uploads.
          #
          # You might need to adjust this value depending on your setup. A
          # higher value usually means faster uploads (if the up-link is
          # good enough). It is set rather low by default, because it is a
          # safer default.
          chunk-size = "10M"

          # Number of milliseconds the client should wait before doing a new
          # upload attempt after something failed. The length of the array
          # denotes the number of retries.
          retry-delays = [0, 3000, 6000, 12000, 24000, 48000]

          # The login page can display a welcome message that is readable by
          # everyone. The text is processed as markdown.
          welcome-message = ""

          # The ISO-3166-1 code of the default language to use. If a invalid
          # code is given (or one where no language is available), it falls
          # back to "gb".
          default-language = "gb"

          # The interval a new authentication token is retrieved. This must
          # be at least 30s lower than `backend.auth.session-valid'.
          auth-renewal = "4 minutes"

          # The initial page to go to after logging in. It can be one of the
          # following: home, uploads, share
          initial-page = "home"

          # The value for the validity that is preselected. Only values that
          # are available in the dropdown are possible to specifiy.
          default-validity = 7 days

          # The inital ui theme to use. Can be either 'light' or 'dark'.
          initial-theme = "dark"

          # When only OAuth is configured and only a single provider, then
          # the weapp automatically redirects to its authentication page
          # skipping the sharry login page. This will also disable the
          # logout button, since sharry is not in charge anyways.
          oauth-auto-redirect = true
        }

        backend {

          # Authentication is flexible to let Sharry be integrated in other
          # environments.
          auth {
            #### Login Modules
            ##
            ## The following settings configure how users are authenticated.
            ## There are several ways possible. The simplest is to
            ## authenticate agains the internal database. But often there is
            ## already a user management component and sharry can be
            ## configured to authenticated against other services.

            # The http authentication module sends the username and password
            # via a HTTP request and uses the response to indicate success or
            # failure.
            #
            # If the method is POST, the `body' is sent with the request and
            # the `content-type' is used.
            http {
              enabled = false
              url = "http://localhost:1234/auth?user={{user}}&password={{pass}}"
              method = "POST"
              body = ""
              content-type = ""
              order = 20
            }

            # Use HTTP Basic authentication. An Authorization header using
            # the Basic scheme is created and the request is send to the
            # given url. The response body will be ignored, only the status
            # is inspected.
            http-basic {
              enabled = false
              url = "http://somehost:2345/path"
              method = "GET"
              order = 30
            }

            # The command authentication module runs an external command
            # giving it the username and password. The return code indicates
            # success or failure.
            command {
              enabled = false
              program = [
                "/path/to/someprogram"
                "{{user}}"
                "{{pass}}"
              ]
              # the return code to consider successful verification
              success = 0
              order = 40
            }

            # The internal authentication module checks against the internal
            # database.
            internal {
              enabled = true
              order = 50
            }
          }

          # The database connection.
          #
          # By default a H2 file-based database is configured. You can
          # provide a postgresql or mariadb connection here. When using H2
          # use the PostgreSQL compatibility mode.
          jdbc {
            url = "jdbc:h2://"${java.io.tmpdir}"/sharry-demo.db;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE"
            user = "sa"
            password = ""
          }

          # How files are stored.
          files {
            # The id of an enabled store from the `stores` array that should
            # be used.
            default-store = "database"

            # A list of possible file stores. Each entry must have a unique
            # id. The `type` is one of: default-database, filesystem, s3.
            #
            # All stores with enabled=false are
            # removed from the list. The `default-store` must be enabled.
            stores = {
              database =
                { enabled = true
                  type = "default-database"
                }

              filesystem =
                { enabled = false
                  type = "file-system"
                  directory = "/some/directory"
                }

              minio =
                { enabled = false
                  type = "s3"
                  endpoint = "http://localhost:9000"
                  access-key = "username"
                  secret-key = "password"
                  bucket = "sharry"
                }
            }

            # Allows to copy files from one store to the other *before* sharry
            # will be available. It is recommended to set the `enabled` flag to
            # false afterwards and restart sharry.
            #
            # Files are only copied, they are *not* removed from the source
            # store.
            copy-files = {
              enable = false

              # A key in the `backend.files` config identifying the store to
              # copy from.
              source = "database"

              # A key in the `backend.files` config identifying the store to
              # copy the files to.
              target = "minio"

              # How many files to copy in parallel.
              parallel = 2
            }
          }

          # Checksums of uploaded files are computed in the background.
          compute-checksum = {
            # Setting this to false disables computation of checksums completely.
            enable = true

            # How many ids to queue at most. If full, uploading blocks until
            # elemnts are taken off the queue
            capacity = 5000

            # How many checksums to compute in parallel, must be > 0. If 1,
            # they are computed sequentially.
            parallel = 0

            # If true, the `parallel` option above is ignored and it will be
            # set to the number of available cores - 1 (using 1 for single
            # core machines).
            use-default = true
          }

          # Configuration for registering new users at the local database.
          # Accounts registered here are checked via the `internal'
          # authentication plugin as described above.
          signup {

            # The mode defines if new users can signup or not. It can have
            # three values:
            #
            # - open: every new user can sign up
            # - invite: new users can sign up only if they provide a correct
            #   invitation key. Invitation keys can be generated by an admin.
            # - closed: signing up is disabled.
            mode = "open"

            # If mode == 'invite', this is the period an invitation token is
            # considered valid.
            invite-time = "14 days"

            # A password that is required when generating invitation keys.
            # This is more to protect against accidentally creating
            # invitation keys. Generating such keys is only permitted to
            # admin users.
            invite-password = "generate-invite"
          }


          share {
            # When storing binary data use chunks of this size.
            chunk-size = "512K"

            # Maximum size of a share.
            max-size = "1.5G"

            # Maximum validity for uploads
            max-validity = 365 days

            # Allows additional database checks to be translated into some
            # meaningful message to the user.
            #
            # This config is used when inspecting database error messages.
            # If the error message from the database contains the defined
            # `native` part, then the server returns a 422 with the error
            # messages given here as `message`.
            #
            # See issue https://github.com/eikek/sharry/issues/255 – the
            # example is a virus check via a postgresql extension "snakeoil".
            database-domain-checks = [
              # Example: This message originates from postgres with an
              # enabled snakeoil extension. This extension allows to virus
              # check byte arrays. It must be setup such that the `bytea`
              # type of the filechunk table is changed to the type
              # `safe_bytea`:
              #
              # CREATE EXTENSION pg_snakeoil;
              # CREATE DOMAIN public.safe_bytea as bytea CHECK (not so_is_infected(value));
              # ALTER TABLE public.filechunk ALTER COLUMN chunkdata TYPE safe_bytea;
              { enabled = false
                native = "domain safe_bytea violates check constraint"
                message = "The uploaded file contains a virus!"
              }
            ]
          }

          cleanup {
            # Whether to enable the cleanup job that periodically
            # cleans up published, expired shares and expired invites
            enabled = true

            # The interval for the cleanup job
            interval = 14 days

            # Time of published shares past expiration to get collected by cleanup job
            invalid-age = 7 days
          }
        }
      }
